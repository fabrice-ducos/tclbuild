#!/bin/sh

# this tiny command displays the value of a given property (e.g. java.home) on a *nix system;
# it depends only on the shell, grep and sed and should therefore be reasonably portable 
# Fabrice Ducos 28 april 2019
#
# a more portable tool (e.g. based on Perl) can be developed by the author if it proves
# useful for Windows' users.
#
# this code is Public Domain; there is no restriction to its usage

awk=`which awk`
path_separator=':'

if [ $# -ne 1 ] ; then
  echo "usage: $0 <java_property_name>" 1>&2
  echo "" 1>&2
  echo "List of available properties:" 1>&2
  java -XshowSettings:properties -version
  exit 1
fi

property=$1

case $property in
  java.class.path|java.library.path|sun.boot.library.path)
    if [ -x "$awk" ] ; then
      # awk is required for properties spanned on several lines;
      # I am not enough a sed-guru in order to handle this case with sed, so let's use awk;
      # one avoids the -v flag for $property and $path_separator, that would be clearer, but less portable
      # (-v is not supported by native OSX awk, up to 10.14)
      #
      # stricly speaking, this part can manage all cases: one-line and multi-line properties
      # I still prefer to call sed when awk is not required

      java -XshowSettings:properties -version 2>&1 | $awk '
          # when the multiline property looked for is found, the entry state is set to 1
          # it returns to 0 at the next property
      
          # the first path is in the 3rd field (after an = sign), other paths are alone on their line
          # For instance:
          # java.library.path = /usr/java/packages/lib/amd64
          #      /usr/lib/x86_64-linux-gnu/jni
          #      /lib/x86_64-linux-gnu
          #      /usr/lib/x86_64-linux-gnu
          #      /usr/lib/jni
          #      /lib
          #      /usr/lib

          BEGIN { entry_found=0 ; paths="" ; sep="'$path_separator'"; }
          entry_found==0 && /.*'$property' = / { entry_found=1; paths = $3 ; next; } # the first path is in the 3rd field:
          entry_found==1 && /.* = / { entry_found=0; }
          entry_found==1 { paths = paths sep $1; }
          END { print paths }
      '
      exit 0
    else
      echo "$0: $property requires some version of awk for being extracted. None was found in the PATH." 1>&2 ; exit 1
    fi ;;
   *) # for most cases (one-line properties), sed is simpler and sufficient:
      java -XshowSettings:properties -version 2>&1 | grep "$property" | sed "s/.*$property = //"
esac

exit 0

